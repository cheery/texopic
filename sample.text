#title Texopic typesetting format

Texopic is a side-effect of designing
#url{https://leverlanguage.com}. It is easy to learn and
easy to use typesetting format for civilized, and less
civilized ages.

While highly inspired by TeX, Texopic is neither TeX nor a
superset of TeX.

Texopic name born as a wordplay from "TeX by Topic". Author
thinks it sounds a bit like Aztec.

Core principle in texopic is the use of one control
character (#) to form macros. This makes it easy to avoid
triggering a document processor when writing a plaintext.

To make it even harder to trigger a macro on accident, the
macro word must be separated from plaintext by either
semicolons or space. The surrounding semicolon characters
around a macro word are consumed.

It should be extremely unlikely occurrence that texopic
processor recognizes a macro from an URL you paste into your
document.

Whenever a macro is recognised, every texopic processor
recognizes the exact same macros and structure.

#section Specification

Overall, this document here should describe the texopic
format in whole.

If the tool doesn't behave according to this document, the
tool contains a bug.

#section{tools} Tools

#href{https://github.com/cheery/texopic}
{Utility library for python}
#href
{https://github.com/cheery/texopic/archive/master.zip}
{(Download)}

#subsection Notes for utility library

The library contains a module and scripts to generate html
from texopic format. That generator has been written in such
way that lets you build your own document processor from the
pieces.

The html generator doesn't escape HTML properly. That needs
to be fixed later on.

The repository for the utility library contains also the
most up-to-date version of this document.


#section Character escapes

Texopic processors are expected to accept UTF-8 text. But
they can also recognize two forms of character escapes:
#;XX and #;U+XXXX. You can use both of these formats to
represent unicode characters that mess up in the editor.

#section Macro block ##;

Sometimes it is desirable to not let texopic format your
text. For example when writing short code snippets, or
something that should go through a specialized processor
that doesn't obey texopic rules.

For this purpose there is a ##; macro. When ##; appears
on the end of a line, it will consume the subsequent lines
that are indented higher than the line where the ##; macro
appeared.

##
    #code python ##
        print("hello world")
        
This feature may make texopic pain-in-the-ass to syntax
color. But then it enables you to write a real, backwards
compatible WYSIWYG text processor around this format.

The semicolon after a ##; macro prevents it from having an
effect at the end of a line.

#section Segment breaking

Blank lines in texopic text breaks the text into segments.
Also, the ##; macro always ends a segment.

Macros can be used to label a segment to give them a special
meaning. #;title, #;section and #;subsection have precisely
that behavior.

#section Macro grouping

The { and } characters are used to group in texopic. They
prevent newlines from breaking the segment. 

} and { characters can be used in the stream without worries
as long as they pair properly inside the macro groups. They
only have meaning when they come after a macro.

Whenever a macro is followed by one or more groups, those
groups are fused into the macro as arguments.

Blank lines or characters between a macro and a group
prevent the macro from collecting the group.

Here are several examples of groups that do not fuse with a
macro:

##
    #href;{does not fuse}

    #url

    {does not fuse}

These groups fuse with macros preceding them:

##
    #href{//example.org}{example}

    #href {//example.org} {example}

    #href
    {//example.org}
    {example}

#section Macro resolution

To understand how texopic works through the document. It is
accurate to think of it as a chain of functions.

The first function transforms plaintext input into sequence
of characters and macro words. Lines consumed by #;#; token
are annotated into that token. The newlines followed by
blanks and macros followed by ';' are marked.

The second function forms segments from a sequence produced
by the first function. The groups and macros are formed and
no further parsing is needed after that point.

At this point the control is on the user. She can choose
which kind of output he wants. She can completely customize
how the macros are interpreted by adjusting the output
processors.

#section Recognized macros

This is a quick summary of what is recognized by the
#href{https://github.com/cheery/texopic}{texopic html processor}.

##
    #title
    ##
    #url{domain}
    #href{domain}{description}
    #section
    #subsection

The macros try to follow conventions present in LaTeX.

#section URL handling

URLs in texopic should be prefixed with #;url macro word.
The automatic recognition of URLs is extremely hard problem
to solve in such way that it covers any and every valid URL
you could pass into the text.

#section History

Texopic started as
#href {//github.com/cheery/lever/blob/master/documentation_considerations.tex}
{consideration} of using TeX for documentation in
#href{//leverlanguage.com} {Lever}.

For Lever I wanted that reference documentation would be
written outside of the source files. The code would be
annotated to refer on the reference, rather than the other
way around.

Lever documentation flows upwards from the source code. This
means that aside reference, there is internal documentation
that is sectioned by source files. That internal
documentation is currently in text files, which felt very
natural to write. I plan to section internal documentation
into chapters that still are sectioned by source files. This
internal documentation forms the basis for higher layers of
documentation.

I prefer that the references, guides and all the other
material would be available on the website as well as in the
runtime. To do this I need a format that a documentation
system in runtime could layout directly, and that could be
translated into highly linked, high quality HTML files.

Many of the files designed for this purpose was unclear and
it was hard to figure out what kind of notation they use.
They appeared to be also difficult to customize.

With texopic I can completely customize my documentation
generation.

#section Trivia

A small python script, texopic.py
was the first instance of a readable typesetting format that
could be used to documentation that matches to high standards.
Later on, it became the
#href{//github.com/cheery/texopic/blob/master/texopic2html.py}{texopic2html.py}

This file has been generated from #url{sample.text} with the
following linux command:

##
    python texopic2html.py sample.text > index.html

#section{license} License

MIT License

Copyright (c) 2016 Henri Tuhola

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the
Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
