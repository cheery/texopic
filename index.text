#title Texopic typesetting language

Texopic is a typesetting language for civilized, and less
civilized ages. It is easy to learn and easy to use.

##
    #title Your story here

    Opening paragraph.

    #href {https://example.org/}
    {Example link}

The core principle in Texopic is to stay on the back when
the author concentrates on writing her content.

Texopic uses only one meta-character (#) to form macros.
This makes it likely to avoid triggering a document
processor when writing your plaintext.

To make it even harder to trigger a macro by accident, the
macro character and word must be separated from the
plaintext by either semicolons or space. The surrounding
semicolon characters around a macro word are consumed.

##
    Hello#world

Would print out as 'Hello#world', whereas.

##
    Hello;#world

Would trigger a macro #;world right after the 'Hello'.
If you actually wanted to type 'Hello #;world' instead, you
could add semicolon after the meta-character to prevent it
from forming a macro.

##
    Hello #;world

It should be extremely unlikely occurrence that a Texopic
processor recognizes a macro from something you write or
paste into your document.

Every Texopic processor recognize the same macros and the
same structure. Users can define new macro words to extend
what they can do with the language.

Texopic processor can be extended by writing new, custom
processors with a scripting language such as 
#href {https://python.org/}
{Python}.

#section Specification

Overall, this document here should describe the Texopic
format in whole.

If the tool doesn't behave according to this document, the
tool contains a bug.

#section{tools} Tools

#href{https://github.com/cheery/texopic}
{Utility library for python}
#href{guide.html}{(Guide)}
#href
{https://github.com/cheery/texopic/archive/master.zip}
{(Download)}

#subsection Notes for utility library

The library contains a module and scripts to generate html
from Texopic format. That generator has been written in such
way that lets you build your own document processor from the
pieces.

The repository for the utility library contains also the
most up-to-date version of this document.


#section Character escapes

Texopic processors are expected to accept UTF-8 text. But
they can also recognize two forms of character escape macros:
#;XX and #;U+XXXX. You can use both of these formats to
represent unicode characters that mess up in the editor.

#section Macro block ##;

Sometimes it is desirable to not let Texopic format your
text. For example when writing short code snippets, or
something that should go through a specialized processor
that doesn't obey Texopic rules.

For this purpose there is a ##; macro. When ##; appears
on the end of a line, it will consume the subsequent lines
that are indented higher than the line where the ##; macro
appeared.

##
    #code python ##
        print("hello world")
        
This feature may make Texopic pain-in-the-ass to syntax
color. But then it enables you to write a real, backwards
compatible WYSIWYG text processor around this format.

The semicolon after a ##; macro prevents it from having an
effect at the end of a line.

#section Blank lines

Blank lines in Texopic text are interpreted as implicit
macros. This is interpreted as a start of a new paragraph.

Macros can be used to discard an empty paragraph and start a
segment of text with special meaning. #;title, #;section;
and #;subsection all have precisely that behavior.

#section Macro grouping

The { and } characters are used to group in Texopic.

} and { characters can be used in the stream without worries
as long as they pair properly inside the macro groups. They
only have meaning when they come after a macro.

Whenever a macro is followed by one or more groups, those
groups are fused into the macro as arguments.

Blank lines or characters between a macro and a group
prevent the macro from collecting the group.

Here are several examples of groups that do not fuse with a
macro:

##
    #href;{does not fuse}

    #url

    {does not fuse}

These groups fuse with macros preceding them:

##
    #href{//example.org}{example}

    #href {//example.org} {example}

    #href
    {//example.org}
    {example}

Macros have to be explicit before macro grouping
applies to them. Grouping is not done on the implicitly
created macros at line breaks.

#section Macro resolution

To understand how Texopic document is processed it is
accurate to think of it as a chain of functions.

The first function transforms plaintext input into sequence
of characters and macro words. Lines consumed by ##; token
are annotated to it. The newlines followed by blanks, and
macros followed by ';' are marked.

The second function forms segments from a sequence produced
by the first function. The groups and macros are formed and
no further parsing is necessary after that point.

At this point the control is up to the user. She can choose
which kind of output she wants. She can completely customize
how the macros are interpreted by adjusting the output
processors.

#subsection Default processor behavior

There is a default behavior for how outputting processor
should work.

#begin{itemize}
#item It should maintain a buffer for the current text segment. 

#item It should manage to create a new vertical list and a
      buffer for a group or for a list itemization.

#item Inside macro groups it should be allowed to ignore
      implicit macros and other such commands that cause the
      vertical list to grow.

#item It should trim whitespace out of the start and end of a
      paragraphs and refuse to produce empty paragraphs.

#item It should not output empty paragraphs.
#end


#section Recognized macros

This is a quick summary of what is recognized by the
#href{https://github.com/cheery/texopic}{Texopic html processor}.

##
    #title
    ##
    #url{link}
    #href{link}{description}
    #image{link}
    #section
    #section{id}
    #subsection
    #subsection{id}
    #begin{itemize}
    #end{itemize}
    #begin{enumerate}
    #end{enumerate}
    #item
    #end
    #comment
    #begin{comment}
    #end{comment}

The macros try to follow conventions present in LaTeX.

Additionally, on HTML output you have a #css -macro, you can
use it like this:

##
    #css ##
        body { padding: 0; margin: 0; }

#section URL handling

URLs in Texopic should be prefixed with #;url macro word.
The automatic recognition of URLs is impractical
to solve in such way that it covers any and every valid URL
you could pass into the text.

#section History

Texopic started out during an 
#href {//github.com/cheery/lever/blob/master/documentation_considerations.tex}
{assessment} of TeX for documentation in
#href{//leverlanguage.com} {Lever}.

For Lever I wanted reference documentation to be
written outside of the source files. The code would be
annotated to refer on the reference, rather than the other
way around.

Lever documentation flows upwards from the source code. This
means that aside from reference, there is internal documentation
that is sectioned by source files. That internal
documentation is currently in text files, which felt very
natural to write. I plan to section internal documentation
into chapters that still are sectioned by source files. This
internal documentation forms the basis for higher layers of
documentation.

I prefer that the references, guides and all the other
material would be available on the website as well as in the
runtime. To do this I need a format that a documentation
system in runtime could layout directly, and that could be
translated into highly linked, high quality HTML files.

Many of the files designed for this purpose was unclear and
it was hard to figure out what kind of notation they use.
They appeared to be also difficult to customize.

With Texopic I can completely customize my documentation
generation.

#section Trivia

While inspired by TeX, Texopic is neither TeX nor a
superset of TeX.

Texopic name born as a wordplay from "TeX by Topic". Author
thinks it sounds a bit like Aztec.

A small python script, texopic.py
was the first instance of a readable typesetting format that
could be used to documentation that matches to high standards.
Later on, it became the
#href{//github.com/cheery/texopic/blob/master/texopic2html.py}{texopic2html.py}

This file has been generated from #url{index.text} with the
following linux command:

##
    python texopic2html.py index.text > index.html

#section{license} License

#include{LICENSE.md}
